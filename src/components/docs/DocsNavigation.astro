---
export interface Props {
  docs: any[];
}

const { docs } = Astro.props;

// Group docs by category
const docsByCategory = docs.reduce((acc, doc) => {
  const category = doc.data.category;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(doc);
  return acc;
}, {});

// Category display names and icons
const categoryInfo = {
  'getting-started': { 
    name: 'Getting Started', 
    icon: 'ðŸš€'
  },
  'guides': { 
    name: 'Guides', 
    icon: 'ðŸ“š'
  },
  'api': { 
    name: 'API Reference', 
    icon: 'âš¡'
  },
  'examples': { 
    name: 'Examples', 
    icon: 'ðŸ’¡'
  },
  'migration': { 
    name: 'Migration', 
    icon: 'ðŸ”„'
  }
};

// Get current path for active state
const currentPath = Astro.url.pathname;
---

<nav class="space-y-6">
  {Object.entries(docsByCategory).map(([category, categoryDocs]) => {
    const info = categoryInfo[category] || { name: category, icon: 'ðŸ“„' };
    
    return (
      <div>
        <h4 class="mb-1 rounded-md px-2 py-1 text-sm font-semibold flex items-center gap-2">
          <span class="text-base">{info.icon}</span>
          {info.name}
        </h4>
        <div class="grid grid-flow-row auto-rows-max text-sm">
          {categoryDocs.map((doc) => {
            const href = `/docs/${doc.slug}`;
            const isActive = currentPath === href;
            
            return (
              <a
                href={href}
                class={`group flex w-full items-center rounded-md border border-transparent px-2 py-1 hover:underline ${
                  isActive 
                    ? 'font-medium text-foreground bg-muted' 
                    : 'text-muted-foreground hover:text-foreground'
                }`}
              >
                {doc.data.title}
              </a>
            );
          })}
        </div>
      </div>
    );
  })}
</nav>
