---
import CodePlayground from '../react/CodePlayground.tsx'

const sampleCode = `// Query orders with DexBee's SQL-like API
const orders = db.table('orders')
const results = await orders
  .select(
    'id', 
    'customer_name', 
    'total', 
    'created_at'
  )
  .where(
    and(
      eq('status', 'completed'),
      gt('total', 100)
    )
  )
  .orderBy(
    'created_at', 
    'desc'
  )
  .limit(10)
  .all()

// Display results
console.log(
  'Found', 
  results.length, 
  'high-value completed orders:'
)
results.forEach(order => {
  console.log(
    \`Order \${order.id}: \${order.customer_name} - $\${order.total}\`
  )
})

// Try other examples:
// const allOrders = await orders.all()
// const pending = await orders.where(eq('status', 'pending')).all()
// const firstOrder = await orders.first()
// const totalOrders = await orders.count()`
---

<section id="code-sample" class="py-20">
  <div class="container mx-auto px-4">
    <div class="text-center">
      <h3 class="text-3xl lg:text-4xl font-bold mb-4">A Bridge Between SQL and IndexedDB</h3>
      <p class="text-xl text-muted-foreground text-balance max-w-2xl mx-auto mb-16">
        DexBee translates your SQL knowledge into powerful IndexedDB queries. Write the way you think.
      </p>

      <div class="max-w-5xl mx-auto text-left">
        <CodePlayground
          client:visible
          initialCode={sampleCode}
          title="Interactive DexBee Query"
          description="Try editing this query and click 'Run' to see how DexBee makes IndexedDB queries intuitive"
          runnable={true}
          height="400px"
        />
      </div>
    </div>
  </div>
</section>
